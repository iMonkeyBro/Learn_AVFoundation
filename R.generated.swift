//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 1 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 18 files.
  struct file {
    /// Resource file `01 Demo AAC.m4a`.
    static let demoAACM4a = Rswift.FileResource(bundle: R.hostingBundle, name: "01 Demo AAC", pathExtension: "m4a")
    /// Resource file `01 Star Gazing.m4a`.
    static let starGazingM4a = Rswift.FileResource(bundle: R.hostingBundle, name: "01 Star Gazing", pathExtension: "m4a")
    /// Resource file `02 Demo ID3v2.2.mp3`.
    static let demoID3v22Mp3 = Rswift.FileResource(bundle: R.hostingBundle, name: "02 Demo ID3v2.2", pathExtension: "mp3")
    /// Resource file `02 Keep Going.m4a`.
    static let keepGoingM4a = Rswift.FileResource(bundle: R.hostingBundle, name: "02 Keep Going", pathExtension: "m4a")
    /// Resource file `03 Demo ID3v2.3.mp3`.
    static let demoID3v23Mp3 = Rswift.FileResource(bundle: R.hostingBundle, name: "03 Demo ID3v2.3", pathExtension: "mp3")
    /// Resource file `04 Demo ID3v2.4.mp3`.
    static let demoID3v24Mp3 = Rswift.FileResource(bundle: R.hostingBundle, name: "04 Demo ID3v2.4", pathExtension: "mp3")
    /// Resource file `04_quasar.mp4`.
    static let _quasarMp4 = Rswift.FileResource(bundle: R.hostingBundle, name: "04_quasar", pathExtension: "mp4")
    /// Resource file `Charlie The Unicorn.m4v`.
    static let charlieTheUnicornM4v = Rswift.FileResource(bundle: R.hostingBundle, name: "Charlie The Unicorn", pathExtension: "m4v")
    /// Resource file `Hubblecast.mov`.
    static let hubblecastMov = Rswift.FileResource(bundle: R.hostingBundle, name: "Hubblecast", pathExtension: "mov")
    /// Resource file `John F. Kennedy.m4a`.
    static let johnFKennedyM4a = Rswift.FileResource(bundle: R.hostingBundle, name: "John F. Kennedy", pathExtension: "m4a")
    /// Resource file `Ronald Reagan.m4a`.
    static let ronaldReaganM4a = Rswift.FileResource(bundle: R.hostingBundle, name: "Ronald Reagan", pathExtension: "m4a")
    /// Resource file `Shader.fsh`.
    static let shaderFsh = Rswift.FileResource(bundle: R.hostingBundle, name: "Shader", pathExtension: "fsh")
    /// Resource file `Shader.vsh`.
    static let shaderVsh = Rswift.FileResource(bundle: R.hostingBundle, name: "Shader", pathExtension: "vsh")
    /// Resource file `bass.caf`.
    static let bassCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "bass", pathExtension: "caf")
    /// Resource file `drums.caf`.
    static let drumsCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "drums", pathExtension: "caf")
    /// Resource file `guitar.caf`.
    static let guitarCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "guitar", pathExtension: "caf")
    /// Resource file `hubblecast2.m4v`.
    static let hubblecast2M4v = Rswift.FileResource(bundle: R.hostingBundle, name: "hubblecast2", pathExtension: "m4v")
    /// Resource file `kenengfou.mp3`.
    static let kenengfouMp3 = Rswift.FileResource(bundle: R.hostingBundle, name: "kenengfou", pathExtension: "mp3")

    /// `bundle.url(forResource: "01 Demo AAC", withExtension: "m4a")`
    static func demoAACM4a(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.demoAACM4a
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "01 Star Gazing", withExtension: "m4a")`
    static func starGazingM4a(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.starGazingM4a
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "02 Demo ID3v2.2", withExtension: "mp3")`
    static func demoID3v22Mp3(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.demoID3v22Mp3
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "02 Keep Going", withExtension: "m4a")`
    static func keepGoingM4a(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.keepGoingM4a
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "03 Demo ID3v2.3", withExtension: "mp3")`
    static func demoID3v23Mp3(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.demoID3v23Mp3
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "04 Demo ID3v2.4", withExtension: "mp3")`
    static func demoID3v24Mp3(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.demoID3v24Mp3
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "04_quasar", withExtension: "mp4")`
    static func _quasarMp4(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file._quasarMp4
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Charlie The Unicorn", withExtension: "m4v")`
    static func charlieTheUnicornM4v(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.charlieTheUnicornM4v
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Hubblecast", withExtension: "mov")`
    static func hubblecastMov(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.hubblecastMov
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "John F. Kennedy", withExtension: "m4a")`
    static func johnFKennedyM4a(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.johnFKennedyM4a
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Ronald Reagan", withExtension: "m4a")`
    static func ronaldReaganM4a(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ronaldReaganM4a
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Shader", withExtension: "fsh")`
    static func shaderFsh(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.shaderFsh
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Shader", withExtension: "vsh")`
    static func shaderVsh(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.shaderVsh
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "bass", withExtension: "caf")`
    static func bassCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.bassCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "drums", withExtension: "caf")`
    static func drumsCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.drumsCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "guitar", withExtension: "caf")`
    static func guitarCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.guitarCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "hubblecast2", withExtension: "m4v")`
    static func hubblecast2M4v(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.hubblecast2M4v
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "kenengfou", withExtension: "mp3")`
    static func kenengfouMp3(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.kenengfouMp3
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 10 images.
  struct image {
    /// Image `faceLayer`.
    static let faceLayer = Rswift.ImageResource(bundle: R.hostingBundle, name: "faceLayer")
    /// Image `icon_flash`.
    static let icon_flash = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_flash")
    /// Image `icon_photo`.
    static let icon_photo = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_photo")
    /// Image `icon_switchCamera`.
    static let icon_switchCamera = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_switchCamera")
    /// Image `looper_bass`.
    static let looper_bass = Rswift.ImageResource(bundle: R.hostingBundle, name: "looper_bass")
    /// Image `looper_drum`.
    static let looper_drum = Rswift.ImageResource(bundle: R.hostingBundle, name: "looper_drum")
    /// Image `looper_guitar`.
    static let looper_guitar = Rswift.ImageResource(bundle: R.hostingBundle, name: "looper_guitar")
    /// Image `voiceMemo_pause`.
    static let voiceMemo_pause = Rswift.ImageResource(bundle: R.hostingBundle, name: "voiceMemo_pause")
    /// Image `voiceMemo_play`.
    static let voiceMemo_play = Rswift.ImageResource(bundle: R.hostingBundle, name: "voiceMemo_play")
    /// Image `voiceMemo_stop`.
    static let voiceMemo_stop = Rswift.ImageResource(bundle: R.hostingBundle, name: "voiceMemo_stop")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "faceLayer", bundle: ..., traitCollection: ...)`
    static func faceLayer(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.faceLayer, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_flash", bundle: ..., traitCollection: ...)`
    static func icon_flash(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_flash, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_photo", bundle: ..., traitCollection: ...)`
    static func icon_photo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_photo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_switchCamera", bundle: ..., traitCollection: ...)`
    static func icon_switchCamera(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_switchCamera, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "looper_bass", bundle: ..., traitCollection: ...)`
    static func looper_bass(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.looper_bass, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "looper_drum", bundle: ..., traitCollection: ...)`
    static func looper_drum(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.looper_drum, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "looper_guitar", bundle: ..., traitCollection: ...)`
    static func looper_guitar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.looper_guitar, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "voiceMemo_pause", bundle: ..., traitCollection: ...)`
    static func voiceMemo_pause(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.voiceMemo_pause, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "voiceMemo_play", bundle: ..., traitCollection: ...)`
    static func voiceMemo_play(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.voiceMemo_play, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "voiceMemo_stop", bundle: ..., traitCollection: ...)`
    static func voiceMemo_stop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.voiceMemo_stop, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
